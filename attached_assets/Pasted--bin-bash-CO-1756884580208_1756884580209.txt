#!/bin/bash

# -----------------------------------------------------------------------------
# CONFIGURATION
# -----------------------------------------------------------------------------

VERSION=0.2.5
CONNECTION_NAME=mioty
MICROMICO_STRING="GWC-62-MY-868"
NMCLI_CONNECTION_CMD="nmcli --terse c"
SSH_HOST="root@172.30.1.2"
SSH_CMD="ssh -o ConnectTimeout=10 -o HostKeyAlgorithms=+ssh-rsa"
SCP_CMD="scp -o ConnectTimeout=10 -o HostKeyAlgorithms=+ssh-rsa"

REPOSITORY="https://github.com/RAKWireless/mioty-cli"
DIR_BIN="${HOME}/.local/bin"
DIR_TMP="/tmp/.mioty-cli"

COLOR_INFO="\e[0;32m" # green
COLOR_WARNING="\e[0;33m" # yellow
COLOR_ERROR="\e[0;31m" # red
COLOR_END="\e[0m"

# -----------------------------------------------------------------------------
# Utils
# -----------------------------------------------------------------------------

# Shows options
usage() {

    COMMAND="mioty-cli"
    if ! command -v $COMMAND &> /dev/null; then
        COMMAND=$0
    fi

    echo -e "${COLOR_INFO}Mioty™ CLI\nUtility to configure and manage Miromico's Miro EdgeCard for Mioty™ board.${COLOR_END}"
    echo
    echo -e "${COLOR_INFO}Host configuration:${COLOR_END}"
    echo
    echo -e "${COLOR_INFO}  $COMMAND setup                --> setups connection and firewall rules${COLOR_END}"
    echo -e "${COLOR_INFO}  $COMMAND remove               --> deletes connection${COLOR_END}"
    echo -e "${COLOR_INFO}  $COMMAND up                   --> brings up connection to edge card${COLOR_END}"
    echo -e "${COLOR_INFO}  $COMMAND down                 --> brings down connection to edge card${COLOR_END}"
    echo
    echo -e "${COLOR_INFO}Edge card configuration:${COLOR_END}"
    echo
    echo -e "${COLOR_INFO}  $COMMAND start                --> starts base station${COLOR_END}"
    echo -e "${COLOR_INFO}  $COMMAND stop                 --> stops base station${COLOR_END}"
    echo -e "${COLOR_INFO}  $COMMAND restart              --> restarts base station${COLOR_END}"
    echo -e "${COLOR_INFO}  $COMMAND enable               --> enables base station on boot by default${COLOR_END}"
    echo -e "${COLOR_INFO}  $COMMAND disable              --> disables base station on boot by default${COLOR_END}"
    echo -e "${COLOR_INFO}  $COMMAND getall               --> gets params from builtin base station${COLOR_END}"
    echo -e "${COLOR_INFO}  $COMMAND set <param> <value>  --> sets a param of the builtin base station${COLOR_END}"
    echo -e "${COLOR_INFO}  $COMMAND cert <file>          --> pushes a certificate file to card${COLOR_END}"
    echo -e "${COLOR_INFO}  $COMMAND reset                --> resets base station params to factory values${COLOR_END}"
    echo -e "${COLOR_INFO}  $COMMAND ssh                  --> ssh to the EdgeCard${COLOR_END}"
    echo -e "${COLOR_INFO}  $COMMAND dashboard            --> create tunnel to access EdgCard dashboard${COLOR_END}"
    echo -e "${COLOR_INFO}  $COMMAND credentials          --> shows default credentials based on uniqueBaseStationId${COLOR_END}"
    echo
    echo -e "${COLOR_INFO}Tool management:${COLOR_END}"
    echo
    echo -e "${COLOR_INFO}  $COMMAND version              --> show the currest script version${COLOR_END}"
    echo -e "${COLOR_INFO}  $COMMAND install              --> installs tool to user path${COLOR_END}"
    echo -e "${COLOR_INFO}  $COMMAND update               --> updates tool to the latest version${COLOR_END}"

}

# Check single dependency
check_dependency() {

    local COMMAND="$1"
    local INSTALLABLE=$2
    local QUIT_IF_NOT_MET=$3

    if ! command -v "$COMMAND" &> /dev/null; then
        
        if [[ $INSTALLABLE -eq 1 ]]; then
            echo -e "${COLOR_WARNING}Missing dependency '$COMMAND'."
            read -rp "Do you want to install it now? [y/N]: " RESPONSE
            echo -e "${COLOR_END}"
            if [[ "$RESPONSE" = "y" ]]; then
                sudo apt install "$COMMAND" -y
                echo 
                return
            fi
        fi

        if [[ $QUIT_IF_NOT_MET -eq 1 ]]; then
            echo -e "${COLOR_ERROR}This script requires ${COMMAND} to work${COLOR_END}\n"
            exit 1
        fi
        
    fi
        
}

# Check dependencies
check_dependencies() {
    check_dependency nmcli 0 1
    check_dependency ssh 0 1
    check_dependency scp 0 1
    check_dependency iptables 0 1
    check_dependency lshw 1 1
}

# Checks folder exists
check_folder() {
    local FOLDER="$1"
    mkdir -p "$FOLDER"
}

compare_versions() {
    if [[ $1 == $2 ]]; then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++)); do
        if ((10#${ver1[i]:=0} > 10#${ver2[i]:=0})); then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]})); then
            return 2
        fi
    done
    return 0
}

# Checks if the connection from host to edge card exists (even if down)
check_connection_exists() {
    CONNECTION_EXISTS=$( ${NMCLI_CONNECTION_CMD} show | grep -c ${CONNECTION_NAME} )
    if [ ${CONNECTION_EXISTS} -ne 1 ]; then
        echo -e "${COLOR_ERROR}ERROR: run 'setup' first to configure the connection${COLOR_END}"
        echo
        usage
        echo
        exit 2
    fi
}

# Checks if the connection from host to edge card is up
check_connection_up() {
    check_connection_exists
    CONNECTION_EXISTS=$( ${NMCLI_CONNECTION_CMD} show --active | grep -c ${CONNECTION_NAME} )
    if [ ${CONNECTION_EXISTS} -ne 1 ]; then
        echo -e "${COLOR_ERROR}ERROR: run 'up' first to bring up the connection${COLOR_END}"
        echo
        usage
        echo
        exit 2
    fi
}

# Remounts root partition as read-write in card
mount_rw() {
    check_connection_up
    ${SSH_CMD} ${SSH_HOST} "mount -o rw,remount /"
}

# Sets card time to host time in UTC
settime() {
    check_connection_up
    DATETIME=$( date --utc  +"%Y/%m/%d %H:%M:%S" )
    ${SSH_CMD} ${SSH_HOST} "timedatectl set-timezone UTC ; timedatectl set-time '${DATETIME}'"
}

# Gets edge card first INTERFACE address
get_interface() {
    local INTERFACE=""
    BUS=$( sudo lshw -quiet -businfo -c communication | grep "${MICROMICO_STRING}" | awk '{print $1}' )
    if [ "$BUS" != "" ]; then
        INTERFACE=$( sudo lshw -quiet -businfo -c network | grep "${BUS}" | head -n1 | awk '{print $2}' )
    fi
    echo $INTERFACE
}

# Get MAC address for interface
get_mac() {
    INTERFACE=$1
    MAC=$( ip -o link | grep -i "${INTERFACE}" | awk '{ print $17 }' | head -n 1 )
}

#Gets unique base station ID based on edge card MAC interface
base_station_id() {
    get_interface | awk -F: '{print $1"-"$2"-"$3"-FF-FE-"$4"-"$5"-"$6}' | tr 'a-z' 'A-Z'
}

# -----------------------------------------------------------------------------
# Host - Edge Card connection
# -----------------------------------------------------------------------------

setup_connection() {

    # Get INTERFACE
    INTERNAL_IF=$( get_interface )
    if [[ "$INTERNAL_IF" == "" ]]; then
        echo -e "${COLOR_ERROR}ERROR: could not find interface to card, please double check the card is connected${COLOR_END}"
        echo
        exit 2
    fi

    # Debug
    echo -e "${COLOR_INFO}Miromico ${MICROMICO_STRING} card detected using ${INTERNAL_IF}${COLOR_END}\n"
    
    # Identify interface by traffic
    EXTERNAL_IF=$( ip -o -4 route show to default | awk '{print $5}' )

    # Check if there is a miromico connection
    CONNECTION_EXISTS=$( ${NMCLI_CONNECTION_CMD} | grep -c ${CONNECTION_NAME} )

    if [[ $CONNECTION_EXISTS -eq 0 ]]; then
    sudo ${NMCLI_CONNECTION_CMD} add con-name ${CONNECTION_NAME} type ethernet
    fi

    sudo ${NMCLI_CONNECTION_CMD} modify ${CONNECTION_NAME} ifname "${INTERNAL_IF}"
    sudo ${NMCLI_CONNECTION_CMD} modify ${CONNECTION_NAME} connection.autoconnect yes
    sudo ${NMCLI_CONNECTION_CMD} modify ${CONNECTION_NAME} ipv4.addresses 172.30.1.1/24
    sudo ${NMCLI_CONNECTION_CMD} modify ${CONNECTION_NAME} ipv4.gateway 172.30.1.1
    sudo ${NMCLI_CONNECTION_CMD} modify ${CONNECTION_NAME} ipv4.dns 1.1.1.1
    sudo ${NMCLI_CONNECTION_CMD} modify ${CONNECTION_NAME} ipv4.method manual
    sudo ${NMCLI_CONNECTION_CMD} modify ${CONNECTION_NAME} ipv6.method ignore

    cat <<EOF > /tmp/99-${CONNECTION_NAME}
#!/usr/bin/env bash

INTERFACE=\$1
EVENT=\$2

if [[ "\$INTERFACE" = "$INTERNAL_IF" ]]
then

    ip route del default via 172.30.1.1
    echo 1 > /proc/sys/net/ipv4/ip_forward

    iptables-save  | grep -q "${CONNECTION_NAME}"
    if [[ \$? -eq 1 ]]
    then
        iptables -t filter -I FORWARD -i $INTERNAL_IF -j ACCEPT -m comment --comment "${CONNECTION_NAME}" 
        iptables -t nat -A PREROUTING -p udp --dport 53 -j DNAT --to-destination 1.1.1.1:53 -m comment --comment "${CONNECTION_NAME}"  
        iptables -t nat -A POSTROUTING -o $EXTERNAL_IF -j MASQUERADE -m comment --comment "${CONNECTION_NAME}" 
    fi

fi

exit 0

EOF

    sudo chown root:root /tmp/99-${CONNECTION_NAME}
    sudo chmod 755 /tmp/99-${CONNECTION_NAME}
    sudo mv /tmp/99-${CONNECTION_NAME} /etc/NetworkManager/dispatcher.d/

    sudo ${NMCLI_CONNECTION_CMD} reload

}

remove_connection() {
    
    # Remove connection
    sudo ${NMCLI_CONNECTION_CMD} del ${CONNECTION_NAME}
    sudo rm -rf /etc/NetworkManager/dispatcher.d/99-${CONNECTION_NAME}

    check_dependency iptables-save 0 1
    check_dependency iptables-restore 0 1

    # Remove firewall rules
    sudo iptables-save | grep -v "${CONNECTION_NAME}" > /tmp/.iptables-rules
    sudo iptables-restore < /tmp/.iptables-rules
    sudo rm /tmp/.iptables-rules

}

start_connection() {
    check_connection_exists
    sudo ${NMCLI_CONNECTION_CMD} up ${CONNECTION_NAME}
}

stop_connection() {
    check_connection_exists
    sudo ${NMCLI_CONNECTION_CMD} down ${CONNECTION_NAME}
}

enable_connection() {
    check_connection_exists
    sudo ${NMCLI_CONNECTION_CMD} modify ${CONNECTION_NAME} connection.autoconnect yes
}

disable_connection() {
    check_connection_exists
    sudo ${NMCLI_CONNECTION_CMD} modify ${CONNECTION_NAME} connection.autoconnect no
}

# -----------------------------------------------------------------------------
# base station management
# -----------------------------------------------------------------------------

start_pf() {
    check_connection_up
    ${SSH_CMD} ${SSH_HOST} "systemctl start mioty_bs"
}

stop_pf() {
    check_connection_up
    ${SSH_CMD} ${SSH_HOST} "systemctl stop mioty_bs"
}

enable_pf() {
    check_connection_up
    ${SSH_CMD} ${SSH_HOST} "systemctl enable mioty_bs"
}

disable_pf() {
    check_connection_up
    ${SSH_CMD} ${SSH_HOST} "systemctl disable mioty_bs"
}

getallparams() {

    check_connection_up
    
    rm -rf /tmp/mioty_bs_config.xml
    scp -q -o ConnectTimeout=2 -o HostKeyAlgorithms=+ssh-rsa  root@172.30.1.2:mioty_bs/mioty_bs_config.xml /tmp/mioty_bs_config.xml 
    RESPONSE=$?
    if [[ $RESPONSE -ne 0 ]]; then
        echo -e "${COLOR_ERROR}ERROR: connection error, please check the connection is started${COLOR_END}\n"
        exit 2
    fi

    UNIQUE_BASE_STATION_ID=$( cat /tmp/mioty_bs_config.xml | grep uniqueBaseStationId | cut -d'>' -f2 | cut -d'<' -f1 )
    BASE_STATION_NAME=$( cat /tmp/mioty_bs_config.xml | grep baseStationName | cut -d'>' -f2 | cut -d'<' -f1 )
    BASE_STATION_VENDOR=$( cat /tmp/mioty_bs_config.xml | grep baseStationVendor | cut -d'>' -f2 | cut -d'<' -f1 )
    BASE_STATION_MODEL=$( cat /tmp/mioty_bs_config.xml | grep baseStationModel | cut -d'>' -f2 | cut -d'<' -f1 )
    SERVICE_CENTER_ADDR=$( cat /tmp/mioty_bs_config.xml | grep serviceCenterAddr | cut -d'>' -f2 | cut -d'<' -f1 )
    SERVICE_CENTER_PORT=$( cat /tmp/mioty_bs_config.xml | grep serviceCenterPort | cut -d'>' -f2 | cut -d'<' -f1 )
    PROFILE=$( cat /tmp/mioty_bs_config.xml | grep profile | cut -d'>' -f2 | cut -d'<' -f1 )
    TLS_AUTH_REQUIRED=$( cat /tmp/mioty_bs_config.xml | grep tlsAuthRequired | cut -d'>' -f2 | cut -d'<' -f1 )

    echo -e "${COLOR_INFO}uniqueBaseStationId : ${UNIQUE_BASE_STATION_ID}"
    echo -e "${COLOR_INFO}baseStationName     : ${BASE_STATION_NAME}"
    echo -e "${COLOR_INFO}baseStationVendor   : ${BASE_STATION_VENDOR}"
    echo -e "${COLOR_INFO}baseStationModel    : ${BASE_STATION_MODEL}"
    echo -e "${COLOR_INFO}serviceCenterAddr   : ${SERVICE_CENTER_ADDR}"
    echo -e "${COLOR_INFO}serviceCenterPort   : ${SERVICE_CENTER_PORT}"
    echo -e "${COLOR_INFO}tlsAuthRequired     : ${TLS_AUTH_REQUIRED}"
    echo -e "${COLOR_INFO}profile             : ${PROFILE}"

    rm -rf /tmp/mioty_bs_config.xml 

}

setparam() {

    PARAM=$1
    VALUE=$2

    # Check valid params
    VALID_PARAMS=" uniqueBaseStationId baseStationName baseStationVendor baseStationModel serviceCenterAddr serviceCenterPort tlsAuthRequired profile "
    VALID_PARAM=$( echo "${VALID_PARAMS}" | grep -c " ${PARAM} " )
    if [[ $VALID_PARAM -ne 1 ]]; then
        echo -e "${COLOR_ERROR}ERROR: unknown '${PARAM}', valid parameters are$VALID_PARAMS${COLOR_END}\n"
        exit 2
    fi

    # Check connection
    check_connection_up
    
    # Mount as read-write
    mount_rw

    # Backup copy
    ${SSH_CMD} ${SSH_HOST} "cd mioty_bs ; [ ! -f mioty_bs_config.xml.backup ] && cp mioty_bs_config.xml mioty_bs_config.xml.backup"

    # Change value
    ${SSH_CMD} ${SSH_HOST} "sed 's|\s*<parameter name=\"${PARAM}\">.*|    <parameter name=\"${PARAM}\">${VALUE}</parameter>|' -i mioty_bs/mioty_bs_config.xml"
    
}

resetparams() {
    
    # Check connection
    check_connection_up
    
    # Mount as read-write
    mount_rw

    # recover backup
    ${SSH_CMD} ${SSH_HOST} "cd mioty_bs ; [ -f mioty_bs_config.xml.backup ] && cp mioty_bs_config.xml.backup mioty_bs_config.xml"
    ${SSH_CMD} ${SSH_HOST} "cd mioty_bs/tls_certificates ; [ -f bstation.cer.backup ] && cp bstation.cer.backup bstation.cer"
    ${SSH_CMD} ${SSH_HOST} "cd mioty_bs/tls_certificates ; [ -f bstation.key.backup ] && cp bstation.key.backup bstation.key"
    ${SSH_CMD} ${SSH_HOST} "cd mioty_bs/tls_certificates ; [ -f root_ca.cer.backup ] && cp root_ca.cer.backup root_ca.cer"

}

pushcert() {

    # Get file
    FILE=$1

    # Exists?
    if [[ ! -f $FILE ]]; then
        echo -e "${COLOR_ERROR}ERROR: file $FILE does not exist${COLOR_END}\n"
        exit 2
    fi

    # has valid name
    FILENAME=$( basename "${FILE}" )
    VALID_FILENAMES=" bstation.cer  bstation.key  root_ca.cer "
    VALID_FILENAME=$( echo "${VALID_FILENAMES}" | grep -w -c  " ${FILENAME} " )
    if [[ $VALID_FILENAME -ne 1 ]]; then
        echo -e "${COLOR_ERROR}ERROR: valid filenames are$VALID_FILENAMES${COLOR_END}\n"
        exit 2
    fi

    # Check connection
    check_connection_up
    
    # Mount as read-write
    mount_rw

    # Backup copy
    ${SSH_CMD} ${SSH_HOST} "cd mioty_bs/tls_certificates ; [ ! -f ${FILENAME}.backup ] && cp ${FILENAME} ${FILENAME}.backup"

    # Push file
    ${SCP_CMD} "${FILE}" ${SSH_HOST}:mioty_bs/tls_certificates/

}

# -----------------------------------------------------------------------------
# Tool management
# -----------------------------------------------------------------------------

install() {

    UPDATE=$1

    # Check system
    check_folder "${DIR_BIN}"
    rm -rf "${DIR_TMP}"

    # Get latest version
    if git clone --quiet "${REPOSITORY}" "${DIR_TMP}"; then

        NEW_VERSION=$( grep "^VERSION=" "${DIR_TMP}/mioty-cli" | sed 's/VERSION=//' )
        
        if [[ $UPDATE -eq 1 ]]; then
        
            # Get new version
            compare_versions "$NEW_VERSION" "$VERSION"
            COMPARE_VERSIONS_RESULT=$?
            if [[ $COMPARE_VERSIONS_RESULT -eq 1 ]]; then
                echo -e "${COLOR_INFO}Updating Mioty CLI from $VERSION to $NEW_VERSION${COLOR_END}"
                cp "${DIR_TMP}/mioty-cli" "${DIR_BIN}/mioty-cli"
            else
                echo -e "${COLOR_INFO}Mioty CLI is up to date${COLOR_END}"
            fi
        
        else
            echo -e "${COLOR_INFO}Installing Mioty CLI v$NEW_VERSION${COLOR_END}"
            cp "${DIR_TMP}/mioty-cli" "${DIR_BIN}/mioty-cli"
        fi

        rm -rf "${DIR_TMP}"

    else
        echo -e "${COLOR_ERROR}ERROR: network error${COLOR_END}\n"
        exit 1
    fi

}

sshin() {
    exec ${SSH_CMD} ${SSH_HOST}
}

dashboard() {
    
    IP=$( hostname -I | awk '{print $1}' )
    PORT=8888

    echo -e "${COLOR_INFO}Access dashboard on http://${IP}:${PORT} once the tunnel is created${COLOR_END}"
    echo
    ${SSH_CMD} "-L 0.0.0.0:${PORT}:localhost:8080" ${SSH_HOST}

}

credentials() {

    check_connection_up
    
    rm -rf /tmp/mioty_bs_config.xml
    scp -q -o ConnectTimeout=2 -o HostKeyAlgorithms=+ssh-rsa root@172.30.1.2:mioty_bs/mioty_bs_config.xml /tmp/mioty_bs_config.xml 
    RESPONSE=$?
    if [[ $RESPONSE -ne 0 ]]; then
        echo -e "${COLOR_ERROR}ERROR: connection error, please check the connection is started${COLOR_END}\n"
        exit 2
    fi

    UNIQUE_BASE_STATION_ID=$( cat /tmp/mioty_bs_config.xml | grep uniqueBaseStationId | cut -d'>' -f2 | cut -d'<' -f1 )
    SERVICE_CENTER_ADDR=$( cat /tmp/mioty_bs_config.xml | grep serviceCenterAddr | cut -d'>' -f2 | cut -d'<' -f1 )

    rm -rf /tmp/mioty_bs_config.xml     

    LMAC=$( echo ${UNIQUE_BASE_STATION_ID:0-8} | sed 's/-//g' | tr [A-Z] [a-z] )
    USERNAME="pockit+${LMAC}@miromico.io"
    PASSWORD="a12${LMAC:0:3}_B34${LMAC:0-3}"

    echo -e "${COLOR_INFO}Default credentials (mind these might have changed)${COLOR_END}"
    echo
    echo -e "${COLOR_INFO}Service center : https://${SERVICE_CENTER_ADDR}"
    echo -e "${COLOR_INFO}Username       : ${USERNAME}"
    echo -e "${COLOR_INFO}Password       : ${PASSWORD}"

}

# -----------------------------------------------------------------------------
# Entry point
# -----------------------------------------------------------------------------

echo

# Check requirements
check_dependencies

if [[ $# -eq 0 ]]; then
    usage
    echo
    exit 1
fi

ACTION=$1
case "${ACTION}" in

    "setup")
        echo -e "${COLOR_INFO}Setting up connection and firewall rules${COLOR_END}\n"
        setup_connection
        start_connection
        ;;

    "remove")
        echo -e "${COLOR_INFO}Removing connection${COLOR_END}\n"
        stop_connection
        remove_connection
        ;;

    "up")
        echo -e "${COLOR_INFO}Bring up connection to edge card${COLOR_END}\n"
        start_connection
        ;;

    "down")
        echo -e "${COLOR_INFO}Bring down connection to edge card${COLOR_END}\n"
        stop_connection
        ;;

    "start")
        echo -e "${COLOR_INFO}Starting base station${COLOR_END}\n"
        start_pf
        ;;

    "stop")
        echo -e "${COLOR_INFO}Stopping base station${COLOR_END}\n"
        stop_pf
        ;;

    "restart")
        echo -e "${COLOR_INFO}Restarting base station${COLOR_END}\n"
        stop_pf
        start_pf
        ;;

    "enable")
        echo -e "${COLOR_INFO}Enabling base station on boot${COLOR_END}\n"
        enable_pf
        ;;

    "disable")
        echo -e "${COLOR_INFO}Disabling base station on boot${COLOR_END}\n"
        disable_pf
        ;;

    "getall") 
        echo -e "${COLOR_INFO}Base station parameters${COLOR_END}\n"
        getallparams
        ;;

    "set")
        if [[ $# -ne 3 ]]; then
            echo -e "${COLOR_ERROR}ERROR: Param name and value are required${COLOR_END}\n"
            usage
        else 
            setparam $2 $3
        fi
        ;;
    
    "cert")
        if [[ $# -ne 2 ]]; then
            echo -e "${COLOR_ERROR}ERROR: Certificate file requires${COLOR_END}\n"
            usage
        else 
            pushcert $2
        fi
        ;;

    "reset")
        echo -e "${COLOR_INFO}Factory reset base station parameters${COLOR_END}"
        resetparams
        ;;

    "version")
        echo -e "${COLOR_INFO}Mioty CLI utility v${VERSION}${COLOR_END}"
        ;;

    "install")
        install 0
        ;;
    
    "update")
        install 1
        ;;
    
    "ssh")
        sshin
        ;;

    "dashboard")
        dashboard
        ;;

    "credentials")
        credentials
        ;;

    *)
        usage
        ;;

esac

echo